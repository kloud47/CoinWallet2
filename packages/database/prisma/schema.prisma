generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  phone             String              @unique
  password          String
  pin               Int                 @default(123)
  name              String              @unique
  profile_url       String?             @unique
  public_id         String?
  loanPending       String?
  loans             Int[]
  splitPending      Int?
  splits            Int[]
  OnRampTransaction OnRampTransaction[]
  balance           Balance[]
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  recievedTransfers p2pTransfer[]       @relation(name: "toUserRelation")
  recievedName      p2pTransfer[]       @relation(name: "toUsernameRelation")
  contactNames      contacts[]          @relation(name: "ContactNameRelation")
  contactPhone      contacts[]          @relation(name: "ContactPhoneRelation")
  contactProfile    contacts[]          @relation(name: "ContactProfileRelation")
  split             Split[]             @relation(name: "SplitRelation")
  loan              Loan[]              @relation(name: "loanRelation")
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model contacts {
  userID         Int
  givenName      String?
  ContactPhone   String
  contactName    String
  Created        DateTime
  contactProfile String?
  user           User     @relation(name: "ContactNameRelation", fields: [contactName], references: [name])
  phone          User     @relation(name: "ContactPhoneRelation", fields: [ContactPhone], references: [phone])
  profile        User?    @relation(name: "ContactProfileRelation", fields: [contactProfile], references: [profile_url])

  @@id(name: "contactID", [userID, ContactPhone])
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model p2pTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserID Int
  message    String?
  fromUser   User     @relation(name: "FromUserRelation", fields: [fromUserID], references: [id])
  toUserID   Int
  toUser     User     @relation(name: "toUserRelation", fields: [toUserID], references: [id])
  Username   String
  toUsername User     @relation(name: "toUsernameRelation", fields: [Username], references: [name])
}

model Members {
  id          Int         @id @default(autoincrement())
  splitID     Int
  split       Split       @relation(name: "SplitMember", fields: [splitID], references: [splitID], onDelete: Cascade)
  contactName String
  phone       String      @unique
  status      SplitStatus
  amountOwed  Int
}

model Split {
  id        Int         @id @default(autoincrement())
  splitID   Int         @unique
  amount    Int
  timestamp DateTime
  title     String
  content   String?
  splitHost Int
  members   String[]
  member    Members[]   @relation(name: "SplitMember")
  host      User        @relation(name: "SplitRelation", fields: [splitHost], references: [id])
  status    SplitStatus
}

model Loan {
  id        Int      @id @default(autoincrement())
  loanID    Int      @unique
  amount    Int
  timestamp DateTime
  title     String
  loanTo    Int
  duration  DateTime
  lender    User     @relation(name: "loanRelation", fields: [loanID], references: [id])
}

enum SplitStatus {
  pending
  complete
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
